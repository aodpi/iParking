@inject UserManager<ApplicationUser> _userManager
@model ParkingReservation
@{
    ViewData["Title"] = "Home Page";
    var user = await _userManager.GetUserAsync(User);
}

@section Styles {
    <style>
        td {
            padding: 5px;
        }

        #map {
            height: 400px;
            width: 100%;
        }
    </style>
}

<div class="row">
    <div class="col-md-8">
        <h1>iParking</h1>
        <select id="parkings" style="margin-bottom: 30px;" class="form-control"></select>
    </div>
    <div id="map"></div>
</div>


@section Scripts {
    <script>
        var map;
        var directionsService;
        var directionsDisplay;
        var parkingsList = [];
        var existingmarkers = [];
        var currentPos;
        function initMap() {
            var infoWindow = new google.maps.InfoWindow;
            directionsService = new google.maps.DirectionsService();
            directionsDisplay = new google.maps.DirectionsRenderer();

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    currentPos = pos;
                    map = new google.maps.Map(document.getElementById('map'), {
                        center: pos,
                        zoom: 16
                    });

                    directionsDisplay.setMap(map);

                    $.get({
                        url: "Home/GetParkings",
                        success: function (data) {
                            parkingsList = [];
                            for (var i = 0; i < data.length; i++) {
                                var mpos = {
                                    lat: data[i].latitude,
                                    lng: data[i].longitude
                                };
                                var marker = new google.maps.Marker({
                                    map: map,
                                    position: mpos,
                                    title: data[i].parkingName
                                });

                                existingmarkers.push(marker);
                                map.setCenter(mpos);
                                $("#parkings").append($("<option/>", {
                                    value: data[i].id,
                                    text: data[i].parkingName
                                }));

                                parkingsList.push(data[i]);
                            }
                        }

                    })
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }
        }

        $("#parkings").change(function () {
            var value = $(this).val();

            var parking;

            for (var i = 0; i < parkingsList.length; i++) {
                if (parkingsList[i].id === parseInt(value)) {
                    parking = parkingsList[i];
                    break;
                }
            }

            for (var i = 0; i < existingmarkers.length; i++) {
                existingmarkers[i].setMap(null);
                existingmarkers.pop();
            }

            var mpos = {
                lat: parking.latitude,
                lng: parking.longitude
            };
            
            calcRoute(currentPos, mpos);
        });

        function calcRoute(start, end) {
            var request = {
                origin: start,
                destination: end,
                travelMode: 'DRIVING'
            };
            directionsService.route(request, function (result, status) {
                if (status == 'OK') {
                    directionsDisplay.setDirections(result);
                }
            });
        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
            infoWindow.open(map);
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBinp-qLSF_vLY3g5JrV3Zk0C9wFLlvTlM&callback=initMap" async defer></script>
}